{"version":3,"sources":["components/intro.js","redux/todo.js","components/card.js","components/column.js","components/board.js","redux/store.js","App.js","reportWebVitals.js","index.js"],"names":["Intro","className","to","initialTodo","columns","name","cards","description","JSON","stringify","todo","createSlice","initialState","reducers","addNew","prevState","actions","payload","columnIndex","push","moveCard","cardIndex","moveToColumn","splice","card","editCard","title","deleteCard","deleteColumn","addColumn","editColumn","Card","onMoveLeft","onMoveRight","useSelector","state","dispatch","length","useDispatch","useState","setDescription","setTitle","editor","setEditor","useEffect","draggable","onDrag","e","console","log","onClick","type","value","onChange","target","placeholder","rows","Column","onEdit","column","titleEditor","setTitleEditor","colName","setColName","refColName","useRef","clickOutside","current","contains","document","addEventListener","removeEventListener","ref","map","Board","session","onAddCard","handleChange","Store","configureStore","reducer","App","store","path","exact","component","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7ba84b3f.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/intro.scss';\nimport {Link} from \"react-router-dom\";\n\nconst Intro = () => (\n    <div className='intro'>\n        <div className='center-box'>\n            <h1>Sprint To Do</h1>\n\n            <Link to=\"/board\">\n                <button>Get Started!</button>\n            </Link>\n        </div>\n    </div>\n);\n\nexport default Intro;","import {createSlice} from \"@reduxjs/toolkit\";\n\nconst initialTodo = {\n    columns: [\n        {\n            name: 'backlog',\n            cards: [\n                {name: 'card A', description: 'description of Card A'},\n                {name: 'card D', description: 'description of Card D'},\n                {name: 'card E', description: 'description of Card E'},\n            ]\n        },\n        {\n            name: 'In Progress',\n            cards: [\n                {name: 'Card B', description: 'description of Card B'}\n            ]\n        },\n        {\n            name: 'Done',\n            cards: [\n                {name: 'Card C', description: \"Description of Card C\"}\n            ]\n        },\n        {\n            name: 'Blockers',\n            cards: [\n                {name: 'Card F', description: \"Description of Card F\"}\n            ]\n        }\n    ]\n};\nJSON.stringify(initialTodo)\nconst todo = createSlice({\n    name: \"todo\",\n    initialState: initialTodo,\n    reducers: {\n        addNew: (prevState, actions) => {\n            prevState.columns[actions.payload.columnIndex].cards.push({name: \"\", description: \"\"});\n            // return {\n            //     ...prevState,\n            //     columns: [\n            //         ...prevState.columns.slice(0,columnIndex),\n            //         {\n            //             ...prevState.columns[columnIndex],\n            //             cards: [\n            //                 ...prevState.columns[columnIndex].cards,\n            //                 {name: \"\", description: \"\"}\n            //             ]\n            //         },\n            //         ...prevState.columns.slice(columnIndex+1,prevState.columns.length)\n            //     ]\n            // }\n        },\n        moveCard: (prevState, actions) => {\n            const columns = [...prevState.columns];\n            const {columnIndex, cardIndex, moveToColumn} = actions.payload;\n            const [card] = columns[columnIndex].cards.splice(cardIndex, 1);\n            columns[moveToColumn].cards.push(card);\n        },\n        editCard: (prevState, actions) => {\n            const columns = [...prevState.columns];\n            const {columnIndex, cardIndex, title, description} = actions.payload;\n            columns[columnIndex].cards[cardIndex] = {\n                ...columns[columnIndex].cards[cardIndex],\n                name: title,\n                description\n            };\n        },\n        deleteCard: (prevState, actions) => {\n            const columns = [...prevState.columns];\n            const {columnIndex, cardIndex} = actions.payload;\n            columns[columnIndex].cards.splice(cardIndex, 1)\n        },\n        deleteColumn: (prevState, actions) => {\n            prevState.columns.splice(actions.payload.columnIndex, 1)\n        },\n        addColumn: (prevState, actions) => {\n            prevState.columns.push({\n                name: 'column',\n                cards: []\n            })\n        },\n        editColumn: (prevState, actions) => {\n            prevState.columns[actions.payload.columnIndex] = {\n                ...prevState.columns[actions.payload.columnIndex],\n                name: actions.payload.name\n            }\n        }\n\n    }\n})\nexport default todo.reducer;\nexport const {addNew, editCard, moveCard, deleteCard, deleteColumn, addColumn, editColumn} = todo.actions;","import React, {useEffect, useState} from 'react';\nimport './styles/card.scss';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {editCard,moveCard,deleteCard} from \"../redux/todo\";\n\nconst Card = ({cardIndex, onMoveLeft, onMoveRight, columnIndex}) => {\n    const card = useSelector(state => state.todo.columns[columnIndex].cards[cardIndex]);\n    const columns = useSelector(state => state.todo.columns);\n\n    const canMoveLeft = columnIndex !== 0;\n    const canMoveRight = columnIndex !== columns.length - 1;\n\n    const dispatch = useDispatch();\n    const [description, setDescription] = useState(card.description);\n    const [title, setTitle] = useState(card.name);\n    const [editor, setEditor] = useState(false);\n\n    const setCard = () => {\n        dispatch(editCard({cardIndex,columnIndex,title,description}));\n        setEditor(false);\n    }\n    const delCard = () => {\n      dispatch(deleteCard({cardIndex, columnIndex}));\n    }\n    useEffect(() => {\n        if (!title) {\n            setEditor(true);\n        }\n    }, [title]);\n    return (<div className='card' draggable={!editor} onDrag={e=>{\n            console.log(e);\n        }}>\n            <div className='cardhead'>\n                {!editor ? <button onClick={() => setEditor(true)}><i className=\"fa-regular fa-pen\"/></button> :\n                    <button onClick={setCard}><i className=\"fa-regular fa-check\"/></button>\n                }\n                {!editor ? <h4>{card.name}</h4> :\n                    <input name='title' type='text' value={title} onChange={e => setTitle(e.target.value)}/>\n                }\n                {!editor ? <button onClick={delCard}><i className=\"fa-regular fa-trash\"/></button> :\n                    <button onClick={() => setEditor(false)}><i className=\"fa-regular fa-times\"/></button>\n                }\n\n            </div>\n            <br/>\n            <p className='description'>{!editor ?\n                card.description :\n                <textarea placeholder='Edit your Markdown Here'\n                          className='textarea'\n                          rows='10'\n                          value={description}\n                          onChange={e => setDescription(e.target.value)}\n                />}\n            </p>\n        </div>\n    )\n};\n\nexport default Card;","import React, {useState, useRef, useEffect} from 'react';\nimport Card from \"./card\";\nimport './styles/column.scss';\nimport {addNew, deleteColumn, editColumn} from \"../redux/todo\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nconst Column = ({columnIndex, onMoveLeft, onMoveRight, onEdit}) => {\n    const column = useSelector(state => state.todo.columns[columnIndex]);\n    const [titleEditor, setTitleEditor] = useState(false);\n    const [colName, setColName] = useState(column.name)\n    const refColName = useRef(null);\n    const dispatch = useDispatch();\n    const setColTitle = () => {\n        dispatch(editColumn({columnIndex, name: colName}));\n    }\n    const clickOutside = e => {\n        if (refColName.current && !refColName.current.contains(e.target)) {\n            setTitleEditor(false);\n        }\n    }\n    const delcol = () => {\n        dispatch(deleteColumn({columnIndex}))\n    }\n    useEffect(() => {\n        if (titleEditor)\n            document.addEventListener('mousedown', clickOutside);\n\n        return ()=>{\n            document.removeEventListener('mousedown',clickOutside);\n        }\n    }, [titleEditor]);\n    return (\n        <div className='column'>\n            <div className='colheader'>\n                <button onClick={delcol}><i className=\"fa-regular fa-trash\"/></button>\n                {!titleEditor ? <h1 onClick={() => setTitleEditor(true)}>{colName}</h1> :\n                    <input ref={refColName} type='text' value={colName} onChange={e => setColName(e.target.value)}/>\n                }\n                <button onClick={() => dispatch(addNew({columnIndex}))}><i className=\"fa-solid fa-plus\"/></button>\n            </div>\n            <div className='cards'>\n                {\n                    column.cards.map((card, cardIndex) => {\n                        return (\n                            <Card\n                                cardIndex={cardIndex}\n                                key={cardIndex}\n                                onMoveLeft={onMoveLeft}\n                                onMoveRight={onMoveRight}\n                                onEdit={onEdit}\n                                columnIndex={columnIndex}\n                            />\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n};\n\nexport default Column;","import React from 'react';\nimport Column from \"./column\";\nimport './styles/board.scss';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {addColumn, addNew} from \"../redux/todo\";\n\nconst Board = () => {\n    const DIRECTION_LEFT = -1;\n    const DIRECTION_RIGHT = 1;\n    const session = useSelector(state => state.todo);\n    const newCard = {name: \"\", description: \"\"};\n    const dispatch = useDispatch();\n    const handleAdd = columnIndex => {\n\n    }\n    const handleChange = (cardIndex, columnIndex) => {\n        // const cards = [...session.columns[columnIndex].cards];\n        console.log(cardIndex, columnIndex);\n    }\n    const handleMove = (columnIndex, cardIndex, direction) => {\n\n\n    }\n    const addCol = () => {\n        dispatch(addColumn({}))\n    }\n    return (\n        <div className='board'>\n            {session.columns.map((column, columnIndex) => {\n                return (\n                    <Column columnIndex={columnIndex}\n                            key={columnIndex}\n                            onMoveLeft={cardIndex => handleMove(columnIndex, cardIndex, DIRECTION_LEFT)}\n                            onMoveRight={cardIndex => handleMove(columnIndex, cardIndex, DIRECTION_RIGHT)}\n                            onAddCard={() => handleAdd(columnIndex)}\n                            onEdit={(cardIndex) => handleChange(cardIndex, columnIndex)}\n                    />\n                )\n            })}\n            <div className='addcol' onClick={addCol}>\n                <i className=\"fa-solid fa-plus\"/>\n            </div>\n        </div>\n    )\n};\n\nexport default Board;","import todo from \"./todo\";\nimport {configureStore} from \"@reduxjs/toolkit\";\n\nconst Store = configureStore({\n    reducer: {todo},\n});\n\nexport default Store;","import './styles/App.scss';\nimport {useState} from \"react\";\nimport {HashRouter as Router, Route} from \"react-router-dom\";\nimport Intro from \"./components/intro\";\nimport Board from \"./components/board\";\nimport {Provider} from \"react-redux\";\nimport Store from \"./redux/store\";\n\nfunction App() {\n    return (\n        <Provider store={Store}>\n            <div className=\"App\">\n                <div className='background'>\n                    <Router>\n                        <Route path='/' exact component={Intro}/>\n                        <Route path='/board' render={() => (<Board/>)} exact/>\n                    </Router>\n                </div>\n            </div>\n        </Provider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}