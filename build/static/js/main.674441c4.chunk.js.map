{"version":3,"sources":["components/intro.js","redux/todo.js","components/card.js","components/column.js","components/board.js","redux/store.js","App.js","reportWebVitals.js","index.js"],"names":["Intro","className","to","initialTodo","columns","name","cards","description","descriptionMd","JSON","stringify","todo","createSlice","initialState","reducers","addNew","prevState","actions","payload","columnIndex","push","moveCard","cardIndex","moveToColumn","splice","card","editCard","title","deleteCard","console","log","deleteColumn","addColumn","editColumn","updateMd","Card","useSelector","state","dispatch","useDispatch","useState","setDescription","setTitle","editor","setEditor","useEffect","desc","fetch","method","headers","body","text","then","response","status","toString","data","catch","error","draggable","onDrag","e","onDragEnd","event","onClick","type","value","onChange","target","placeholder","rows","dangerouslySetInnerHTML","__html","Column","onMoveLeft","onMoveRight","onEdit","column","titleEditor","setTitleEditor","colName","setColName","refColName","useRef","clickOutside","current","contains","document","addEventListener","removeEventListener","ref","map","Board","session","onAddCard","handleChange","Store","configureStore","reducer","App","store","path","exact","component","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.674441c4.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/intro.scss';\nimport {Link} from \"react-router-dom\";\n\nconst Intro = () => (\n    <div className='intro'>\n        <div className='center-box'>\n            <h1>Sprint To Do</h1>\n\n            <Link to=\"/board\">\n                <button>Get Started!</button>\n            </Link>\n        </div>\n    </div>\n);\n\nexport default Intro;","import {createSlice} from \"@reduxjs/toolkit\";\n\nconst initialTodo = {\n    columns: [\n        {\n            name: 'backlog',\n            cards: [\n                {name: 'card A', description: 'description of Card A', descriptionMd: '<p>description of Card A</p>'},\n                {name: 'card D', description: 'description of Card D', descriptionMd: '<p>description of Card A</p>'},\n                {name: 'card E', description: 'description of Card E', descriptionMd: '<p>description of Card A</p>'},\n            ]\n        },\n        {\n            name: 'In Progress',\n            cards: [\n                {name: 'Card B', description: 'description of Card B', descriptionMd: '<p>description of Card A</p>'}\n            ]\n        },\n        {\n            name: 'Done',\n            cards: [\n                {name: 'Card C', description: \"Description of Card C\", descriptionMd: '<p>description of Card A</p>'}\n            ]\n        },\n        {\n            name: 'Blockers',\n            cards: [\n                {name: 'Card F', description: \"Description of Card F\", descriptionMd: '<p>description of Card A</p>'}\n            ]\n        }\n    ]\n};\nJSON.stringify(initialTodo)\nconst todo = createSlice({\n    name: \"todo\",\n    initialState: initialTodo,\n    reducers: {\n        addNew: (prevState, actions) => {\n            prevState.columns[actions.payload.columnIndex].cards.push({name: \"\", description: \"\"});\n            // return {\n            //     ...prevState,\n            //     columns: [\n            //         ...prevState.columns.slice(0,columnIndex),\n            //         {\n            //             ...prevState.columns[columnIndex],\n            //             cards: [\n            //                 ...prevState.columns[columnIndex].cards,\n            //                 {name: \"\", description: \"\"}\n            //             ]\n            //         },\n            //         ...prevState.columns.slice(columnIndex+1,prevState.columns.length)\n            //     ]\n            // }\n        },\n        moveCard: (prevState, actions) => {\n            const columns = [...prevState.columns];\n            const {columnIndex, cardIndex, moveToColumn} = actions.payload;\n            const [card] = columns[columnIndex].cards.splice(cardIndex, 1);\n            columns[moveToColumn].cards.push(card);\n        },\n        editCard: (prevState, actions) => {\n            const columns = [...prevState.columns];\n            const {columnIndex, cardIndex, title, description} = actions.payload;\n            columns[columnIndex].cards[cardIndex] = {\n                ...columns[columnIndex].cards[cardIndex],\n                name: title,\n                description\n            };\n        },\n        deleteCard: (prevState, actions) => {\n            const columns = [...prevState.columns];\n            const {columnIndex, cardIndex} = actions.payload;\n            columns[columnIndex].cards.splice(cardIndex, 1);\n            console.log(cardIndex,columnIndex,columns[columnIndex].cards);\n        },\n        deleteColumn: (prevState, actions) => {\n            prevState.columns.splice(actions.payload.columnIndex, 1)\n        },\n        addColumn: (prevState, actions) => {\n            prevState.columns.push({\n                name: 'column',\n                cards: []\n            })\n        },\n        editColumn: (prevState, actions) => {\n            prevState.columns[actions.payload.columnIndex] = {\n                ...prevState.columns[actions.payload.columnIndex],\n                name: actions.payload.name\n            }\n        },\n        updateMd: (prevState, actions) => {\n            prevState.columns[actions.payload.columnIndex].cards[actions.payload.cardIndex] = {\n                ...prevState.columns[actions.payload.columnIndex].cards[actions.payload.cardIndex],\n                descriptionMd: actions.payload.descriptionMd\n            }\n        }\n\n    }\n})\nexport default todo.reducer;\nexport const {addNew, editCard, moveCard, deleteCard, deleteColumn, addColumn, editColumn, updateMd} = todo.actions;","import React, {useEffect, useState} from 'react';\nimport './styles/card.scss';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {editCard, moveCard, deleteCard, updateMd} from \"../redux/todo\";\n\nconst Card = ({cardIndex, columnIndex}) => {\n    const todo = useSelector(state => state.todo);\n\n    const card = todo.columns[columnIndex].cards[cardIndex];\n    console.log(card);\n\n    const dispatch = useDispatch();\n    const [description, setDescription] = useState(card.description);\n    const [title, setTitle] = useState(card.name);\n    // const [descriptionMd,setDescriptionMd]=useState(card.descriptionMd);\n    const [editor, setEditor] = useState(false);\n\n    const setCard = () => {\n        dispatch(editCard({cardIndex, columnIndex, title, description}));\n        setEditor(false);\n    }\n\n    const delCard = () => {\n        dispatch(deleteCard({cardIndex, columnIndex}));\n    }\n\n//TODO: mark it Down khud ka api banana hai\n    const renderMd = desc => {\n        if (!desc)\n            return\n\n        fetch(\"https://api.github.com/markdown\", {\n            method: 'POST', // or 'PUT'\n            headers: {\n                'Content-Type': 'application/vnd.github.v3+json',\n            },\n            body: JSON.stringify({\n                text: desc,\n            })\n        }).then(response => {\n            if (response.status.toString()[0] !== \"2\")\n                return undefined;\n            return response.text();\n        })\n            .then(data => {\n                if (data) {\n                    dispatch(updateMd({columnIndex, cardIndex, descriptionMd: data}));\n                    // setDescriptionMd(data);\n                } else {\n                    dispatch(updateMd({columnIndex, cardIndex, descriptionMd: description}));\n                    // setDescriptionMd(description);\n                }\n            })\n            .catch(error => {\n                console.error('Error: ', error);\n            });\n    }\n\n    useEffect(() => {\n        if (!title) {\n            setEditor(true);\n        }\n    }, [title]);\n\n    useEffect(() => {\n        renderMd(description)\n    }, [description])\n    return (<div className='card' draggable={!editor} onDrag={e => {\n            console.log(e);\n        }} onDragEnd={event => {\n            console.log(event);\n        }}>\n            <div className='cardhead'>\n                {!editor ? <button onClick={() => setEditor(true)}><i className=\"fa-regular fa-pen\"/></button> :\n                    <button onClick={setCard}><i className=\"fa-regular fa-check\"/></button>\n                }\n                {!editor ? <h4>{card.name}</h4> :\n                    <input name='title' type='text' value={title} onChange={e => setTitle(e.target.value)}/>\n                }\n                {!editor ? <button onClick={delCard}><i className=\"fa-regular fa-trash\"/></button> :\n                    <button onClick={() => setEditor(false)}><i className=\"fa-regular fa-times\"/></button>\n                }\n            </div>\n\n            <br/>\n\n            {!editor ?\n                <div dangerouslySetInnerHTML={{\n                    __html: card.descriptionMd,\n                }}/> :\n                <textarea placeholder='Edit your Markdown Here'\n                          className='textarea'\n                          rows='10'\n                          value={description}\n                          onChange={e => setDescription(e.target.value)}\n                />}\n        </div>\n    )\n};\n\nexport default Card;","import React, {useState, useRef, useEffect} from 'react';\nimport Card from \"./card\";\nimport './styles/column.scss';\nimport {addNew, deleteColumn, editColumn} from \"../redux/todo\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nconst Column = ({columnIndex, onMoveLeft, onMoveRight, onEdit}) => {\n    const column = useSelector(state => state.todo.columns[columnIndex]);\n    const [titleEditor, setTitleEditor] = useState(false);\n    const [colName, setColName] = useState(column.name);\n    const refColName = useRef(null);\n    const dispatch = useDispatch();\n    const setColTitle = () => {\n        dispatch(editColumn({columnIndex, name: colName}));\n    }\n    const clickOutside = e => {\n        if (refColName.current && !refColName.current.contains(e.target)) {\n            setTitleEditor(false);\n        }\n    }\n    const delcol = () => {\n        dispatch(deleteColumn({columnIndex}))\n    }\n    useEffect(() => {\n        if (titleEditor)\n            document.addEventListener('mousedown', clickOutside);\n\n        return ()=>{\n            document.removeEventListener('mousedown',clickOutside);\n        }\n    }, [titleEditor]);\n    return (\n        <div className='column'>\n            <div className='colheader'>\n                <button onClick={delcol}><i className=\"fa-regular fa-trash\"/></button>\n                {!titleEditor ? <h1 onClick={() => setTitleEditor(true)}>{column.name}</h1> :\n                    <input ref={refColName} type='text' value={column.name} onChange={e => {\n                        dispatch(editColumn({columnIndex,name: colName}));\n                        setColName(e.target.value);\n                    }}/>\n                }\n                <button onClick={() => dispatch(addNew({columnIndex}))}><i className=\"fa-solid fa-plus\"/></button>\n            </div>\n            <div className='cards'>\n                {\n                    column.cards.map((card, cardIndex) => {\n                        return (\n                            <Card\n                                cardIndex={cardIndex}\n                                key={cardIndex}\n                                onMoveLeft={onMoveLeft}\n                                onMoveRight={onMoveRight}\n                                onEdit={onEdit}\n                                columnIndex={columnIndex}\n                            />\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n};\n\nexport default Column;","import React from 'react';\nimport Column from \"./column\";\nimport './styles/board.scss';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {addColumn, addNew} from \"../redux/todo\";\n\nconst Board = () => {\n    const DIRECTION_LEFT = -1;\n    const DIRECTION_RIGHT = 1;\n    const session = useSelector(state => state.todo);\n    const newCard = {name: \"\", description: \"\"};\n    const dispatch = useDispatch();\n    const handleAdd = columnIndex => {\n\n    }\n    const handleChange = (cardIndex, columnIndex) => {\n        // const cards = [...session.columns[columnIndex].cards];\n        console.log(cardIndex, columnIndex);\n    }\n    const handleMove = (columnIndex, cardIndex, direction) => {\n\n\n    }\n    const addCol = () => {\n        dispatch(addColumn({}))\n    }\n    return (\n        <div className='board'>\n            {session.columns.map((column, columnIndex) => {\n                return (\n                    <Column columnIndex={columnIndex}\n                            key={columnIndex}\n                            onMoveLeft={cardIndex => handleMove(columnIndex, cardIndex, DIRECTION_LEFT)}\n                            onMoveRight={cardIndex => handleMove(columnIndex, cardIndex, DIRECTION_RIGHT)}\n                            onAddCard={() => handleAdd(columnIndex)}\n                            onEdit={(cardIndex) => handleChange(cardIndex, columnIndex)}\n                    />\n                )\n            })}\n            <div className='addcol' onClick={addCol}>\n                <i className=\"fa-solid fa-plus\"/>\n            </div>\n        </div>\n    )\n};\n\nexport default Board;","import todo from \"./todo\";\nimport {configureStore} from \"@reduxjs/toolkit\";\n\nconst Store = configureStore({\n    reducer: {todo},\n});\n\nexport default Store;","import './styles/App.scss';\nimport {useState} from \"react\";\nimport {HashRouter as Router, Route} from \"react-router-dom\";\nimport Intro from \"./components/intro\";\nimport Board from \"./components/board\";\nimport {Provider} from \"react-redux\";\nimport Store from \"./redux/store\";\n\nfunction App() {\n    return (\n        <Provider store={Store}>\n            <div className=\"App\">\n                <div className='background'>\n                    <Router>\n                        <Route path='/' exact component={Intro}/>\n                        <Route path='/board' render={() => (<Board/>)} exact/>\n                    </Router>\n                </div>\n            </div>\n        </Provider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}